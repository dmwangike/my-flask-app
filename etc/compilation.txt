--COMPILATION

CREATE TABLE withdrawals
(account_no varchar(20), tran_date timestamp, amount numeric,status varchar(4), userid varchar(30), comment varchar(60),
withdrawal_date date, withdrawal_id SERIAL PRIMARY KEY
 );

CREATE TABLE holidays (
    h_id SERIAL PRIMARY KEY,
    start_date DATE NOT NULL,
    end_date DATE ,
    holiday VARCHAR(255),
	created_by varchar(50),
	created_on DATE
); 

CREATE TABLE users (id SERIAL PRIMARY KEY, username varchar(50), email varchar(120),
				   password varchar(128),
				   created_date timestamp);
				   
CREATE TABLE update_audit(id SERIAL PRIMARY KEY,table_name varchar(20), operation varchar(15),
						 old_values jsonb,new_values jsonb,windows_user varchar(50),ip_address varchar(100),
						  transaction_time timestamp);






--------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
---Create Trigger Function


CREATE OR REPLACE FUNCTION log_client_updates()
RETURNS TRIGGER AS $$
DECLARE
    win_user TEXT;
    user_ip TEXT;
BEGIN
    -- Fetch the application-level variables set by the Python app
    win_user := current_setting('myapp.cust_mgr', true);  -- Manager name
    user_ip := current_setting('myapp.client_ip', true);  -- Client IP address

    -- Insert captured data into the audit table
    INSERT INTO update_audit (
        table_name,
        operation,
        old_values,
        new_values,
        windows_user,
        ip_address,
        transaction_time
    )
    VALUES (
        TG_TABLE_NAME,                 -- Name of the table being updated
        'UPDATE',                      -- Operation type
        row_to_json(OLD)::JSONB,       -- Old row values
        row_to_json(NEW)::JSONB,       -- New row values
        win_user,                      -- Application-provided manager name
        user_ip,                       -- Application-provided client IP
        CURRENT_TIMESTAMP              -- Transaction timestamp
    );

    -- Return the new row to proceed with the update
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;




--Create Trigger



CREATE TRIGGER log_client_updates_trigger
AFTER UPDATE ON clients
FOR EACH ROW
EXECUTE FUNCTION log_client_updates();





CREATE TRIGGER log_htd_updates_trigger
AFTER UPDATE ON htd_stmt
FOR EACH ROW
EXECUTE FUNCTION log_client_updates();
--------++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


CREATE OR REPLACE PROCEDURE update_tran_date()
LANGUAGE plpgsql AS $$
DECLARE
    rec RECORD;
    next_working_day DATE;
BEGIN
    FOR rec IN
        SELECT "TRAN_DATE", "VALUE_DATE", "PSTD_DATE"
        FROM htd_stmt
        WHERE "RECEIPT_STATUS" = 'N'
    LOOP
        -- Check if VALUE_DATE is greater than TRAN_DATE
        IF rec."VALUE_DATE" > rec."TRAN_DATE" THEN
            CONTINUE;
        END IF;

        -- Check if VALUE_DATE equals TRAN_DATE
        IF rec."VALUE_DATE" = rec."TRAN_DATE" THEN
            IF rec."PSTD_DATE"::timestamp:: time < '10:00:00' OR 
               rec."PSTD_DATE"::timestamp:: time = '10:00:00' THEN
                CONTINUE;
            ELSE
                -- Calculate the next working day
                next_working_day := rec."TRAN_DATE"::date + 1;
                WHILE EXTRACT(ISODOW FROM next_working_day) IN (6, 7) OR
                      EXISTS (
                          SELECT 1
                          FROM holidays
                          WHERE next_working_day BETWEEN start_date AND end_date
                      )
                LOOP
                    next_working_day := next_working_day::date + 1;
                END LOOP;

                -- Update VALUE_DATE to the next working day
                UPDATE htd_stmt
                SET "VALUE_DATE" = next_working_day
                WHERE "PSTD_DATE"::timestamp:: time > '10:00:00' AND "TRAN_DATE" = rec."TRAN_DATE" AND "VALUE_DATE" = rec."VALUE_DATE";
            END IF;
        END IF;
    END LOOP;
END;
$$;
